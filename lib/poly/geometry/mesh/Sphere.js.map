{"version":3,"sources":["../../../../src/poly/geometry/mesh/Sphere.js"],"names":["Sphere","program","data","state","drawType","options","nbVert","radius","positionAttributeName","sphere","positions","indices","index","uv","offset","dTex","angle","i","j","getAngle","push","u","v","uvs","addPosition","addIndices","isNormal","ry","Math","PI","rx","r","pos","sin","t","cos"],"mappings":"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","file":"Sphere.js","sourcesContent":["import Mesh from '../Mesh';\n\nclass Sphere extends Mesh\n{\n  constructor(program, data={}, state, drawType){\n    super(program, state, drawType)\n\n    data = data || {};\n\n    this.options =\n    {\n        nbVert: data.nbVert || 10,\n        radius: data.radius || 1,\n        positionAttributeName: data.positionAttributeName || 'aPosition'\n    }\n\n    this.sphere();\n  }\n\n  sphere()\n  {\n    var positions = [];\n    var indices = [];\n    var index = 0;\n    var uv = []\n    var offset = 0;\n\n    let dTex = 1/ this.options.nbVert;\n\n    let angle;\n    for (var i = 0; i < this.options.nbVert; i++)\n    {\n      for (var j = 0; j < this.options.nbVert; j++)\n      {\n        angle = this.getAngle(i, j);\n        positions.push(angle[0], angle[1], angle[2]);\n\n        angle = this.getAngle(i + 1, j);\n        positions.push(angle[0], angle[1], angle[2]);\n\n        angle = this.getAngle(i + 1, j + 1);\n        positions.push(angle[0], angle[1], angle[2]);\n\n        angle = this.getAngle(i, j + 1);\n        positions.push(angle[0], angle[1], angle[2]);\n\n        const u = j / this.options.nbVert;\n\t\t\t  const v = i / this.options.nbVert;\n  \t\t\tuv.push(1.0 - u, v);\n  \t\t\tuv.push(1.0 - u, v + dTex);\n  \t\t\tuv.push(1.0 - u - dTex, v + dTex);\n  \t\t\tuv.push(1.0 - u - dTex, v);\n\n        indices.push(index * 4 + 0);\n        indices.push(index * 4 + 1);\n        indices.push(index * 4 + 2);\n        indices.push(index * 4 + 0);\n        indices.push(index * 4 + 2);\n        indices.push(index * 4 + 3);\n        index++;\n      }\n    }\n\n    this.uvs = uv;\n\n    this.addPosition(positions, this.options.positionAttributeName);\n    this.addIndices(indices, false);\n  }\n\n  getAngle(i, j, isNormal = false)\n  {\n    //\trx : -90 ~ 90 , ry : 0 ~ 360\n    const ry        = j / this.options.nbVert * Math.PI * 2 - Math.PI;\n\t\tconst rx        = i / this.options.nbVert * Math.PI - Math.PI * 0.5;\n\t\tconst r         = this.options.radius;\n\t\tconst pos       = [];\n\t\tpos[1]        \t= Math.sin(rx) * r;\n\t\tconst t         = Math.cos(rx) * r;\n\t\tpos[0]        \t= Math.cos(ry) * t;\n\t\tpos[2]        \t= Math.sin(ry) * t;\n\n\n\t\treturn [pos[0], pos[1], pos[2]];\n\t}\n\n  render(){\n  }\n}\n\nexport default Sphere;\n"]}