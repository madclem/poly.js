{"version":3,"sources":["../../../../src/poly/geometry/mesh/IcoSphere.js"],"names":["IcoSphere","program","data","state","drawType","options","subdivision","radius","positionAttributeName","icosphere","vertices","faces","indices","t","Math","sqrt","positions","addVertex","push","multiplyTriangles","separate","newVertices","triangles","finalPositions","i","length","v","addPosition","addIndices","position","out"],"mappings":"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","file":"IcoSphere.js","sourcesContent":["import Mesh from '../Mesh';\nimport FacesSeparator from '../../utils/FacesSeparator';\nimport FacesMultiplicator from '../../utils/FacesMultiplicator';\n\nexport default class IcoSphere extends Mesh\n{\n  constructor(program, data={}, state, drawType){\n    super(program, state, drawType)\n\n    data = data || {};\n\n    this.options =\n    {\n        subdivision: data.subdivision || 1,\n        radius: data.radius || 1,\n        positionAttributeName: data.positionAttributeName || 'aPosition'\n    }\n\n    this.icosphere();\n  }\n\n  icosphere()\n  {\n      let vertices = [];\n      let faces = [];\n      // let vertices = [];\n      let indices = [];\n      let radius = 1;\n      // create 12 vertices of a icosahedron\n      var t = (1.0 + Math.sqrt(5.0)) / 2.0 * radius;\n\n      this.positions = [];\n\n      this.addVertex([-1 * radius,  t,  0], vertices);\n      this.addVertex([1 * radius,  t,  0], vertices);\n      this.addVertex([-1 * radius, -t,  0], vertices);\n      this.addVertex([ 1 * radius, -t,  0], vertices);\n\n      this.addVertex([ 0, -1 * radius,  t], vertices);\n      this.addVertex([ 0,  1 * radius,  t], vertices);\n      this.addVertex([ 0, -1 * radius, -t], vertices);\n      this.addVertex([ 0,  1 * radius, -t], vertices);\n\n      this.addVertex([ t,  0, -1 * radius], vertices);\n      this.addVertex([ t,  0,  1 * radius], vertices);\n      this.addVertex([-t,  0, -1 * radius], vertices);\n      this.addVertex([-t,  0,  1 * radius], vertices);\n\n      // create 20 triangles of the icosahedron\n      faces.push([0, 11, 5]);\n      faces.push([0, 5, 1]);\n      faces.push([0, 1, 7]);\n      faces.push([0, 7, 10]);\n      faces.push([0, 10, 11]);\n\n      faces.push([1, 5, 9]);\n      faces.push([5, 11, 4]);\n      faces.push([11, 10, 2]);\n      faces.push([10, 7, 6]);\n      faces.push([7, 1, 8]);\n\n      faces.push([3, 9, 4]);\n      faces.push([3, 4, 2]);\n      faces.push([3, 2, 6]);\n      faces.push([3, 6, 8]);\n      faces.push([3, 8, 9]);\n\n      faces.push([4, 9, 5]);\n      faces.push([2, 4, 11]);\n      faces.push([6, 2, 10]);\n      faces.push([8, 6, 7]);\n      faces.push([9, 8, 1]);\n\n      faces = FacesMultiplicator.multiplyTriangles(this.options.subdivision, faces, vertices);\n\n      let data = FacesSeparator.separate(faces, vertices);\n      let newVertices = data.vertices;\n      let triangles = data.faces;\n\n      let finalPositions = [];\n      for (var i = 0; i < newVertices.length; i++) {\n        let v = newVertices[i];\n        v[0] *= this.options.radius;\n        v[1] *= this.options.radius;\n        v[2] *= this.options.radius;\n        finalPositions.push(v[0], v[1], v[2]);\n      }\n      // this.uvs = uv;\n\n      this.addPosition(finalPositions, this.options.positionAttributeName);\n      this.addIndices(triangles, false);\n\n  }\n\n  addVertex(position, out)\n  {\n    let length = Math.sqrt(position[0] * position[0] + position[1] * position[1] + position[2] * position[2]);\n    out.push([position[0]/length, position[1]/length, position[2]/length]);\n  }\n\n  render(){\n  }\n}\n"]}