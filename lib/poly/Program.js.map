{"version":3,"sources":["../../src/poly/Program.js"],"names":["Program","vertShader","fragShader","uniforms","gl","POLY","cacheAttributesLocation","cacheUniformsLocation","program","createProgram","vert","_createShader","frag","_attachShaders","linkProgram","getProgramParameter","LINK_STATUS","useProgram","uniform","addUniformLocation","_createGetterSetterUniforms","name","value","getUniformLocation","undefined","_this","Proxy","get","target","console","log","set","CONST","uniformTypes","type","getAttribLocation","enableVertexAttribArray","addAttributeLocation","getAttributeLocation","attachShader","src","isVertex","shader","createShader","VERTEX_SHADER","FRAGMENT_SHADER","shaderSource","compileShader","getShaderParameter","COMPILE_STATUS","getShaderInfoLog"],"mappings":"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","file":"Program.js","sourcesContent":["export default class Program\n{\n    constructor(vertShader, fragShader, uniforms)\n    {\n        let gl = POLY.gl; // not sure that's great... :p\n        this.gl = gl;\n            \n        // cache the locations of attributes and uniforms\n        this.cacheAttributesLocation = {}\n        this.cacheUniformsLocation = {}\n\n        // create the program itself\n        this.program = gl.createProgram();\n\n        let vert = this._createShader(vertShader, true);\n        let frag = this._createShader(fragShader, false);\n        this._attachShaders(vert, frag);\n\n        gl.linkProgram(this.program);\n\n        // check for errors\n        if (!gl.getProgramParameter(this.program, gl.LINK_STATUS))\n        {\n            throw \"Couldn't initialise program\";\n        }\n\n        gl.useProgram(this.program);\n\n        for (let uniform in this.uniforms)\n        {\n            this.addUniformLocation(uniform, this.uniforms[uniform]);\n        }\n\n        this._createGetterSetterUniforms(uniforms);\n    }\n\n    addUniformLocation(name, value)\n    {\n        this.cacheUniformsLocation[name] = this.gl.getUniformLocation(this.program, name);\n    }\n\n    getUniformLocation(name)\n    {\n        if(this.cacheUniformsLocation[name] !== undefined)\n        {\n            return this.cacheUniformsLocation[name];\n        }\n        else\n        {\n            this.addUniformLocation(name);\n            \n            return this.getUniformLocation(name);\n        }\n    }\n\n\n    // create a this.uniforms property\n    // useful for the setter, we can just update the uniform when it gets changed\n    _createGetterSetterUniforms(uniforms)\n    {   \n        let gl = this.gl;\n        let program = this.program;\n        let _this = this;\n\n        this.uniforms = new Proxy(uniforms, {\n            get: function(target, name) \n            {\n                if (!(name in target)) \n                {\n                    console.log(\"Getting non-existant property '\" + name + \"'\");\n                    return undefined;\n                }\n\n                return target[name].value;\n            },\n            set: function(target, name, value) \n            {\n                if (!(name in target)) \n                {\n                    console.log(\"Setting non-existant property '\" + name + \"', initial value: \" + value);\n\n                    return false;\n                }\n\n                // /!\\ TODO check GLShader.uniform() when it's not a number, seems more optimised\n                target[name].value = value;\n                gl[POLY.CONST.uniformTypes[target[name].type]](_this.getUniformLocation(name), false, value);\n               \n                return true;\n            }\n        });\n    }\n\n    addAttributeLocation(name)\n    {\n        this.cacheAttributesLocation[name] = this.gl.getAttribLocation(this.program, name);\n        this.gl.enableVertexAttribArray(this.cacheAttributesLocation[name]); // NEVER FORGET THAT LINE (I did...)\n    }\n\n    getAttributeLocation(name)\n    {\n        if(this.cacheAttributesLocation[name] !== undefined)\n        {\n            return this.cacheAttributesLocation[name];\n        }\n        else\n        {\n            this.addAttributeLocation(name);\n\n            return this.getAttributeLocation(name);\n        }\n    }\n\n    _attachShaders(vert, frag)\n    {\n        this.gl.attachShader(this.program, vert);\n        this.gl.attachShader(this.program, frag);\n    }\n\n    _createShader(src, isVertex)\n    {\n        let gl = this.gl;\n        let shader;\n        if (isVertex)\n        {\n            shader = gl.createShader(gl.VERTEX_SHADER);\n        }\n        else\n        {\n            shader = gl.createShader(gl.FRAGMENT_SHADER);\n        }\n\n        this.gl.shaderSource(shader, src);\n        this.gl.compileShader(shader);\n\n        if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS))\n        {\n            throw (\"Couldn't initialise shader, \", gl.getShaderInfoLog(shader));\n            return null;\n        }\n\n        return shader;\n    }\n}\n"]}