{"version":3,"sources":["../../src/poly/Program.js"],"names":["Program","vertShader","fragShader","uniforms","gl","POLY","console","log","cacheAttributesLocation","cacheUniformsLocation","program","createProgram","vert","_createShader","frag","_attachShaders","linkProgram","getProgramParameter","LINK_STATUS","useProgram","_createGetterSetterUniforms","uniform","addUniformLocation","v","value","name","getUniformLocation","undefined","_this","Proxy","get","target","set","type","glFunction","CONST","uniformTypes","indexOf","getAttribLocation","enableVertexAttribArray","addAttributeLocation","getAttributeLocation","attachShader","src","isVertex","shader","createShader","VERTEX_SHADER","FRAGMENT_SHADER","shaderSource","compileShader","getShaderParameter","COMPILE_STATUS","getShaderInfoLog"],"mappings":"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","file":"Program.js","sourcesContent":["export default class Program\r\n{\r\n    constructor(vertShader, fragShader, uniforms)\r\n    {\r\n        let gl = POLY.gl; // not sure that's great... :p\r\n        this.gl = gl;\r\n        console.log(uniforms)\r\n        // cache the locations of attributes and uniforms\r\n        this.cacheAttributesLocation = {}\r\n        this.cacheUniformsLocation = {}\r\n\r\n        // create the program itself\r\n        this.program = gl.createProgram();\r\n\r\n        let vert = this._createShader(vertShader, true);\r\n        let frag = this._createShader(fragShader, false);\r\n        this._attachShaders(vert, frag);\r\n\r\n        gl.linkProgram(this.program);\r\n\r\n        // check for errors\r\n        if (!gl.getProgramParameter(this.program, gl.LINK_STATUS))\r\n        {\r\n            throw \"Couldn't initialise program\";\r\n        }\r\n\r\n        gl.useProgram(this.program);\r\n\r\n        this._createGetterSetterUniforms(uniforms);\r\n        for (let uniform in uniforms)\r\n        {\r\n            this.addUniformLocation(uniform);\r\n            let v = uniforms[uniform].value;\r\n            this.uniforms[uniform] = v;\r\n        }\r\n\r\n    }\r\n\r\n    addUniformLocation(name)\r\n    {\r\n        this.cacheUniformsLocation[name] = this.gl.getUniformLocation(this.program, name);\r\n    }\r\n\r\n    getUniformLocation(name)\r\n    {\r\n        if(this.cacheUniformsLocation[name] !== undefined)\r\n        {\r\n            return this.cacheUniformsLocation[name];\r\n        }\r\n        else\r\n        {\r\n            this.addUniformLocation(name);\r\n\r\n            return this.getUniformLocation(name);\r\n        }\r\n    }\r\n\r\n\r\n    // create a this.uniforms property\r\n    // useful for the setter, we can just update the uniform when it gets changed\r\n    _createGetterSetterUniforms(uniforms)\r\n    {\r\n        let gl = this.gl;\r\n        let program = this.program;\r\n        let _this = this;\r\n\r\n        this.uniforms = new Proxy(uniforms, {\r\n            get: function(target, name)\r\n            {\r\n                if (!(name in target))\r\n                {\r\n                    console.log(\"Getting non-existant property '\" + name + \"'\");\r\n                    return undefined;\r\n                }\r\n\r\n                return target[name].value;\r\n            },\r\n            set: function(target, name, value)\r\n            {\r\n                if (!(name in target))\r\n                {\r\n                    console.log(\"Setting non-existant property '\" + name + \"', initial value: \" + value);\r\n\r\n                    return false;\r\n                }\r\n\r\n                // /!\\ TODO check Wen's GLShader.uniform() when it's not a number, seems more optimised\r\n                target[name].value = value;\r\n                let type = target[name].type;\r\n                let glFunction = POLY.CONST.uniformTypes[type];\r\n\r\n                if(type.indexOf('mat') === -1)\r\n                {\r\n                    gl[glFunction](_this.getUniformLocation(name), value);\r\n                }\r\n                else\r\n                {\r\n                    gl[glFunction](_this.getUniformLocation(name), false, value);\r\n                }\r\n\r\n                return true;\r\n            }\r\n        });\r\n    }\r\n\r\n    addAttributeLocation(name)\r\n    {\r\n        this.cacheAttributesLocation[name] = this.gl.getAttribLocation(this.program, name);\r\n        this.gl.enableVertexAttribArray(this.cacheAttributesLocation[name]); // NEVER FORGET THAT LINE (I did...)\r\n    }\r\n\r\n    getAttributeLocation(name)\r\n    {\r\n        if(this.cacheAttributesLocation[name] !== undefined)\r\n        {\r\n            return this.cacheAttributesLocation[name];\r\n        }\r\n        else\r\n        {\r\n            this.addAttributeLocation(name);\r\n\r\n            return this.getAttributeLocation(name);\r\n        }\r\n    }\r\n\r\n    _attachShaders(vert, frag)\r\n    {\r\n        this.gl.attachShader(this.program, vert);\r\n        this.gl.attachShader(this.program, frag);\r\n    }\r\n\r\n    _createShader(src, isVertex)\r\n    {\r\n        let gl = this.gl;\r\n        let shader;\r\n        if (isVertex)\r\n        {\r\n            shader = gl.createShader(gl.VERTEX_SHADER);\r\n        }\r\n        else\r\n        {\r\n            shader = gl.createShader(gl.FRAGMENT_SHADER);\r\n        }\r\n\r\n        this.gl.shaderSource(shader, src);\r\n        this.gl.compileShader(shader);\r\n\r\n        if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS))\r\n        {\r\n            throw (\"Couldn't initialise shader, \", gl.getShaderInfoLog(shader));\r\n            return null;\r\n        }\r\n\r\n        return shader;\r\n    }\r\n}\r\n"]}