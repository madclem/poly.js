{"version":3,"sources":["../../src/poly/Program.js"],"names":["Program","vertShader","fragShader","gl","POLY","program","createProgram","vert","_createShader","frag","_attachShaders","linkProgram","getProgramParameter","LINK_STATUS","useProgram","vertexPositionAttribute","getAttribLocation","enableVertexAttribArray","pMatrixUniform","getUniformLocation","mvMatrixUniform","attachShader","src","isVertex","shader","createShader","VERTEX_SHADER","FRAGMENT_SHADER","shaderSource","compileShader","getShaderParameter","COMPILE_STATUS","getShaderInfoLog"],"mappings":";;;;;;;;;;IAAqBA,O;AAEjB,qBAAYC,UAAZ,EAAwBC,UAAxB,EACA;AAAA;;AACI,YAAIC,KAAKC,KAAKD,EAAd;AACA,aAAKA,EAAL,GAAUA,EAAV;;AAIA,YAAIE,UAAUF,GAAGG,aAAH,EAAd;AACA,aAAKD,OAAL,GAAeA,OAAf;;AAEA,YAAIE,OAAO,KAAKC,aAAL,CAAmBP,UAAnB,EAA+B,IAA/B,CAAX;AACA,YAAIQ,OAAO,KAAKD,aAAL,CAAmBN,UAAnB,EAA+B,KAA/B,CAAX;;AAEA,aAAKQ,cAAL,CAAoBH,IAApB,EAA0BE,IAA1B;AACAN,WAAGQ,WAAH,CAAeN,OAAf;;AAEA,YAAI,CAACF,GAAGS,mBAAH,CAAuBP,OAAvB,EAAgCF,GAAGU,WAAnC,CAAL,EACA;AACI,kBAAM,6BAAN;AACH;;AAEDV,WAAGW,UAAH,CAAcT,OAAd;;AAEAA,gBAAQU,uBAAR,GAAkCZ,GAAGa,iBAAH,CAAqBX,OAArB,EAA8B,iBAA9B,CAAlC;AACAF,WAAGc,uBAAH,CAA2BZ,QAAQU,uBAAnC;;AAEAV,gBAAQa,cAAR,GAAyBf,GAAGgB,kBAAH,CAAsBd,OAAtB,EAA+B,UAA/B,CAAzB;AACAA,gBAAQe,eAAR,GAA0BjB,GAAGgB,kBAAH,CAAsBd,OAAtB,EAA+B,WAA/B,CAA1B;AACH;;;;uCAEcE,I,EAAME,I,EACrB;AACI,iBAAKN,EAAL,CAAQkB,YAAR,CAAqB,KAAKhB,OAA1B,EAAmCE,IAAnC;AACA,iBAAKJ,EAAL,CAAQkB,YAAR,CAAqB,KAAKhB,OAA1B,EAAmCI,IAAnC;AACH;;;sCAEaa,G,EAAKC,Q,EACnB;AACI,gBAAIpB,KAAK,KAAKA,EAAd;AACA,gBAAIqB,eAAJ;AACA,gBAAID,QAAJ,EACA;AACIC,yBAASrB,GAAGsB,YAAH,CAAgBtB,GAAGuB,aAAnB,CAAT;AACH,aAHD,MAKA;AACIF,yBAASrB,GAAGsB,YAAH,CAAgBtB,GAAGwB,eAAnB,CAAT;AACH;;AAED,iBAAKxB,EAAL,CAAQyB,YAAR,CAAqBJ,MAArB,EAA6BF,GAA7B;AACA,iBAAKnB,EAAL,CAAQ0B,aAAR,CAAsBL,MAAtB;;AAEA,gBAAI,CAACrB,GAAG2B,kBAAH,CAAsBN,MAAtB,EAA8BrB,GAAG4B,cAAjC,CAAL,EACA;AACI,sBAAO,gCAAgC5B,GAAG6B,gBAAH,CAAoBR,MAApB,CAAvC;AACA,uBAAO,IAAP;AACH;;AAED,mBAAOA,MAAP;AACH;;;;;;kBA7DgBxB,O","file":"Program.js","sourcesContent":["export default class Program\n{\n    constructor(vertShader, fragShader)\n    {\n        let gl = POLY.gl;\n        this.gl = gl;\n\n\n\n        let program = gl.createProgram();\n        this.program = program;\n\n        let vert = this._createShader(vertShader, true);\n        let frag = this._createShader(fragShader, false);\n\n        this._attachShaders(vert, frag);\n        gl.linkProgram(program);\n\n        if (!gl.getProgramParameter(program, gl.LINK_STATUS))\n        {\n            throw \"Couldn't initialise program\";\n        }\n\n        gl.useProgram(program);\n\n        program.vertexPositionAttribute = gl.getAttribLocation(program, \"aVertexPosition\");\n        gl.enableVertexAttribArray(program.vertexPositionAttribute);\n\n        program.pMatrixUniform = gl.getUniformLocation(program, \"uPMatrix\");\n        program.mvMatrixUniform = gl.getUniformLocation(program, \"uMVMatrix\");\n    }\n\n    _attachShaders(vert, frag)\n    {\n        this.gl.attachShader(this.program, vert);\n        this.gl.attachShader(this.program, frag);\n    }\n\n    _createShader(src, isVertex)\n    {\n        let gl = this.gl;\n        let shader;\n        if (isVertex)\n        {\n            shader = gl.createShader(gl.VERTEX_SHADER);\n        }\n        else\n        {\n            shader = gl.createShader(gl.FRAGMENT_SHADER);\n        }\n\n        this.gl.shaderSource(shader, src);\n        this.gl.compileShader(shader);\n\n        if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS))\n        {\n            throw (\"Couldn't initialise shader, \", gl.getShaderInfoLog(shader));\n            return null;\n        }\n\n        return shader;\n    }\n}\n"]}