{"version":3,"sources":["../../src/poly/Camera.js"],"names":["Camera","aspectRatio","mat4","create","matrix","inverseViewMatrix","projection","orientation","mRX","mRY","mRZ","mT","position","vec3","target","up","lookAt","angle","identity","fromYRotation","fromXRotation","x","y","z","translate","perspective","fov","near","far","aspect","left","right","bottom","top","dst","Float32Array"],"mappings":"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","file":"Camera.js","sourcesContent":["import Matrices from '../utils/Matrices'\nimport glmatrix from 'gl-matrix';\n\nclass Camera {\n  constructor(){\n    // camera\n    this.aspectRatio = glmatrix.mat4.create();\n    this.matrix = glmatrix.mat4.create();\n    this.inverseViewMatrix = glmatrix.mat4.create();\n    this.projection = glmatrix.mat4.create();\n    this.orientation = glmatrix.mat4.create();\n\n    this.mRX = glmatrix.mat4.create();\n    this.mRY = glmatrix.mat4.create();\n    this.mRZ = glmatrix.mat4.create();\n    this.mT = glmatrix.mat4.create();\n\n    this.position = glmatrix.vec3.create();\n  }\n\n  lookAt(target, up = [0, 1, 0]) {\n\t\t// this.position = glmatrix.vec3.clone(position);\n\t\t// this._center = glmatrix.vec3.clone(target);\n\n    // glmatrix.mat4.identity(this.matrix);\n\t\tglmatrix.mat4.lookAt(this.matrix, this.position, target, up);\n    // console.log(this.matrix);\n\t}\n\n  rotateY(angle) {\n    glmatrix.mat4.identity(this.mRY);\n    glmatrix.mat4.fromYRotation(this.mRY, angle);\n\n    // glmatrix.mat4.translate(this.matrix, this.matrix, this.position);\n    // glmatrix.mat4.rotateY(this.matrix, this.matrix, angle)\n  }\n  rotateX(angle) {\n    glmatrix.mat4.identity(this.mRX);\n    glmatrix.mat4.fromXRotation(this.mRX, angle);\n\n    // glmatrix.mat4.translate(this.matrix, this.matrix, this.position);\n    // glmatrix.mat4.rotateX(this.matrix, this.matrix, angle)\n  }\n\n  rotateZ(angle) {\n    glmatrix.mat4.identity(this.mRZ);\n    glmatrix.mat4.fromXRotation(this.mRZ, angle);\n\n  }\n\n  setRotation(x, y, z) {\n  }\n\n  setPosition(x, y, z) {\n    this.position = [x, y, z]\n    // glmatrix.mat4.identity(this.matrix);\n    // glmatrix.mat4.translate(this.matrix, this.matrix, [x, y, z]);\n    glmatrix.mat4.identity(this.mT, this.mT);\n    glmatrix.mat4.translate(this.mT, this.mT, [x, y, z]);\n    // var translation = vec3.create();\n    // vec3.set (translation, 0, 0, -1.0);\n    // mat4.translate (mvMatrix, mvMatrix, translation);\n\n    // glmatrix.mat4.fromRotationTranslation(this._matrix, 0, translation)\n\t\t// glmatrix.mat4.translate(this._matrix, this._matrix, translation);\n\t}\n\n  setAspectRatio(aspectRatio) {\n\t\tthis.aspectRatio = aspectRatio;\n\t\tthis.perspective(this.fov, aspectRatio, this.near, this.far);\n\t}\n\n  // perspective(fov, aspect, near, far, dst) {\n  //   this.fov = fov;\n  //   this.near = near;\n  //   this.far = far;\n  //\n  //   dst = dst || new Float32Array(16);\n  //   var f = Math.tan(Math.PI * 0.5 - 0.5 * fov);\n  //   var rangeInv = 1.0 / (near - far);\n  //\n  //   dst[ 0] = f / aspect;\n  //   dst[ 1] = 0;\n  //   dst[ 2] = 0;\n  //   dst[ 3] = 0;\n  //   dst[ 4] = 0;\n  //   dst[ 5] = f;\n  //   dst[ 6] = 0;\n  //   dst[ 7] = 0;\n  //   dst[ 8] = 0;\n  //   dst[ 9] = 0;\n  //   dst[10] = (near + far) * rangeInv;\n  //   dst[11] = -1;\n  //   dst[12] = 0;\n  //   dst[13] = 0;\n  //   dst[14] = near * far * rangeInv * 2;\n  //   dst[15] = 0;\n  //\n  //   // this.projection = Matrices.multiply(dst, Matrices.inverse(this.matrix)) ;\n  //\n  //   this.projection = dst;\n  //\n  //   return Matrices.multiply(dst, Matrices.inverse(this.matrix));\n  // }\n\n  perspective(fov, aspect, near, far) {\n\n    glmatrix.mat4.identity(this.matrix);\n\n\t\tglmatrix.mat4.perspective(this.projection, fov, aspect, near, far);\n\n    this.fov = fov;\n    this.near = near;\n    this.far = far;\n    this.aspect = aspect;\n  }\n\n  orthographic(left, right, bottom, top, near, far, dst) {\n    dst = dst || new Float32Array(16);\n\n    dst[ 0] = 2 / (right - left);\n    dst[ 1] = 0;\n    dst[ 2] = 0;\n    dst[ 3] = 0;\n    dst[ 4] = 0;\n    dst[ 5] = 2 / (top - bottom);\n    dst[ 6] = 0;\n    dst[ 7] = 0;\n    dst[ 8] = 0;\n    dst[ 9] = 0;\n    dst[10] = 2 / (near - far);\n    dst[11] = 0;\n    dst[12] = (left + right) / (left - right);\n    dst[13] = (bottom + top) / (bottom - top);\n    dst[14] = (near + far) / (near - far);\n    dst[15] = 1;\n\n    return dst;\n  }\n}\n\n// const  gh = new Camera();\n\n// export default gh;\nexport default Camera;\n"]}