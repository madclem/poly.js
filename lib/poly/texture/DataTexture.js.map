{"version":3,"sources":["../../../src/poly/texture/DataTexture.js"],"names":["DataTexture","data","gl","POLY","_texture","createTexture","bindTexture","TEXTURE_2D","texImage2D","RGBA","UNSIGNED_BYTE","Uint8Array","level","internalFormat","LUMINANCE","width","height","border","format","type","texParameteri","TEXTURE_MIN_FILTER","NEAREST","TEXTURE_MAG_FILTER","TEXTURE_WRAP_S","CLAMP_TO_EDGE","TEXTURE_WRAP_T","index","activeTexture","TEXTURE0"],"mappings":";;;;;;;;;;IAAqBA,W;AAEpB,sBAAYC,IAAZ,EACA;AAAA;;AACC,OAAKC,EAAL,GAAUC,KAAKD,EAAf;AACA,MAAIA,KAAK,KAAKA,EAAd;;AAEA,OAAKE,QAAL,GAAgBF,GAAGG,aAAH,EAAhB;AACAH,KAAGI,WAAH,CAAeJ,GAAGK,UAAlB,EAA8B,KAAKH,QAAnC;;AAEA;AACAF,KAAGM,UAAH,CAAcN,GAAGK,UAAjB,EAA6B,CAA7B,EAAgCL,GAAGO,IAAnC,EAAyC,CAAzC,EAA4C,CAA5C,EAA+C,CAA/C,EAAkDP,GAAGO,IAArD,EAA2DP,GAAGQ,aAA9D,EACc,IAAIC,UAAJ,CAAe,CAAC,CAAD,EAAI,CAAJ,EAAO,GAAP,EAAY,GAAZ,CAAf,CADd;;AAGA;AACA,MAAMC,QAAQ,CAAd;AACA,MAAMC,iBAAiBX,GAAGY,SAA1B;AACA,MAAMC,QAAQ,CAAd;AACA,MAAMC,SAAS,CAAf;AACA,MAAMC,SAAS,CAAf;AACA,MAAMC,SAAShB,GAAGY,SAAlB;AACA,MAAMK,OAAOjB,GAAGQ,aAAhB;AACAR,KAAGM,UAAH,CAAcN,GAAGK,UAAjB,EAA6BK,KAA7B,EAAoCC,cAApC,EAAoDE,KAApD,EAA2DC,MAA3D,EAAmEC,MAAnE,EACcC,MADd,EACsBC,IADtB,EAC4BlB,IAD5B;;AAGA;AACAC,KAAGkB,aAAH,CAAiBlB,GAAGK,UAApB,EAAgCL,GAAGmB,kBAAnC,EAAuDnB,GAAGoB,OAA1D;AACApB,KAAGkB,aAAH,CAAiBlB,GAAGK,UAApB,EAAgCL,GAAGqB,kBAAnC,EAAuDrB,GAAGoB,OAA1D;AACApB,KAAGkB,aAAH,CAAiBlB,GAAGK,UAApB,EAAgCL,GAAGsB,cAAnC,EAAmDtB,GAAGuB,aAAtD;AACAvB,KAAGkB,aAAH,CAAiBlB,GAAGK,UAApB,EAAgCL,GAAGwB,cAAnC,EAAmDxB,GAAGuB,aAAtD;AAEA;;;;yBAGD;AAAA,OADKE,KACL,uEADa,CACb;;AACC,OAAIzB,KAAK,KAAKA,EAAd;AACAA,MAAG0B,aAAH,CAAiB1B,GAAG2B,QAAH,GAAcF,KAA/B;AACGzB,MAAGI,WAAH,CAAeJ,GAAGK,UAAlB,EAA8B,KAAKH,QAAnC;AACH;;;;;;kBAtCmBJ,W","file":"DataTexture.js","sourcesContent":["export default class DataTexture\r\n{\r\n\tconstructor(data)\r\n\t{\r\n\t\tthis.gl = POLY.gl;\r\n\t\tlet gl = this.gl;\r\n\r\n\t\tthis._texture = gl.createTexture();\r\n\t\tgl.bindTexture(gl.TEXTURE_2D, this._texture);\r\n\t\t \r\n\t\t// Fill the texture with a 1x1 blue pixel.\r\n\t\tgl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, 1, 1, 0, gl.RGBA, gl.UNSIGNED_BYTE,\r\n\t\t              new Uint8Array([0, 0, 255, 255]));\r\n\t\t \r\n\t\t// fill texture with 3x2 pixels\r\n\t\tconst level = 0;\r\n\t\tconst internalFormat = gl.LUMINANCE;\r\n\t\tconst width = 3;\r\n\t\tconst height = 2;\r\n\t\tconst border = 0;\r\n\t\tconst format = gl.LUMINANCE;\r\n\t\tconst type = gl.UNSIGNED_BYTE;\r\n\t\tgl.texImage2D(gl.TEXTURE_2D, level, internalFormat, width, height, border,\r\n\t\t              format, type, data);\r\n\t\t \r\n\t\t// set the filtering so we don't need mips and it's not filtered\r\n\t\tgl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\r\n\t\tgl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\r\n\t\tgl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\r\n\t\tgl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\r\n\r\n\t}\r\n\r\n\tbind(index = 0)\r\n\t{\r\n\t\tlet gl = this.gl;\r\n\t\tgl.activeTexture(gl.TEXTURE0 + index);\r\n    \tgl.bindTexture(gl.TEXTURE_2D, this._texture);\r\n\t}\r\n}"]}