{"version":3,"sources":["../../../src/poly/texture/DataTexture.js"],"names":["DataTexture","data","width","height","format","gl","POLY","RGBA","floatTextures","getExtension","Error","halfFloat","type","UNSIGNED_BYTE","extHalfFloat","checkExtension","FLOAT","HALF_FLOAT_OES","console","log","_texture","createTexture","bindTexture","TEXTURE_2D","alignment","pixelStorei","UNPACK_ALIGNMENT","texImage2D","utils","isPowerOfTwo","texParameteri","TEXTURE_MIN_FILTER","NEAREST","TEXTURE_MAG_FILTER","TEXTURE_WRAP_S","CLAMP_TO_EDGE","TEXTURE_WRAP_T","index","activeTexture","TEXTURE0"],"mappings":";;;;;;;;AAAA;;;;;;;;IAEqBA,W;AAEpB,uBAAYC,IAAZ,EACA;AAAA,QADkBC,KAClB,uEAD0B,GAC1B;AAAA,QAD+BC,MAC/B,uEADwC,GACxC;AAAA,QAD6CC,MAC7C;;AAAA;;AACC,SAAKC,EAAL,GAAUC,KAAKD,EAAf;AACA,QAAIA,KAAK,KAAKA,EAAd;;AAEAD,aAASA,UAAUC,GAAGE,IAAtB;;AAEA,QAAIC,gBAAgB,uBAAIC,YAAJ,CAAiB,mBAAjB,CAApB;;AAEM,QAAI,CAAC,uBAAIA,YAAJ,CAAiB,mBAAjB,CAAL,EAA2C;AACzC,YAAM,IAAIC,KAAJ,CAAW,8BAAX,CAAN;AACD;;AAED,QAAIC,YAAY,uBAAIF,YAAJ,CAAiB,wBAAjB,CAAhB;AACA,QAAIG,OAAOP,GAAGQ,aAAd;AACA,QAAMC,eAAe,uBAAIL,YAAJ,CAAiB,wBAAjB,CAArB;AACA,2BAAIA,YAAJ,CAAiB,0BAAjB;;AAEA,QAAI,uBAAIM,cAAJ,CAAmB,mBAAnB,CAAJ,EACA;AACIH,aAAOP,GAAGW,KAAV;AACH,KAHD,MAIK,IAAGF,YAAH,EAAiB;AAClBF,aAAOE,aAAaG,cAApB;AACH;;AAEPC,YAAQC,GAAR,CAAYP,IAAZ,EAAkBP,GAAGW,KAArB;;AAGA,SAAKI,QAAL,GAAgBf,GAAGgB,aAAH,EAAhB;AACAhB,OAAGiB,WAAH,CAAejB,GAAGkB,UAAlB,EAA8B,KAAKH,QAAnC;AACA,QAAMI,YAAY,CAAlB;AACAnB,OAAGoB,WAAH,CAAepB,GAAGqB,gBAAlB,EAAoCF,SAApC;;AAEAnB,OAAGsB,UAAH,CAActB,GAAGkB,UAAjB,EAA6B,CAA7B,EAAgCnB,MAAhC,EAAwCF,KAAxC,EAA+CC,MAA/C,EAAuD,CAAvD,EAA0DC,MAA1D,EAAkEQ,IAAlE,EAAwEX,IAAxE;;AAGA,QAAGK,KAAKsB,KAAL,CAAWC,YAAX,CAAwB3B,KAAxB,KAAkCI,KAAKsB,KAAL,CAAWC,YAAX,CAAwB1B,MAAxB,CAArC,EACE,CACC;;AAEHE,OAAGyB,aAAH,CAAiBzB,GAAGkB,UAApB,EAAgClB,GAAG0B,kBAAnC,EAAuD1B,GAAG2B,OAA1D;AACA3B,OAAGyB,aAAH,CAAiBzB,GAAGkB,UAApB,EAAgClB,GAAG4B,kBAAnC,EAAuD5B,GAAG2B,OAA1D;AACA3B,OAAGyB,aAAH,CAAiBzB,GAAGkB,UAApB,EAAgClB,GAAG6B,cAAnC,EAAmD7B,GAAG8B,aAAtD;AACA9B,OAAGyB,aAAH,CAAiBzB,GAAGkB,UAApB,EAAgClB,GAAG+B,cAAnC,EAAmD/B,GAAG8B,aAAtD;AACC;AACA;AAED;;;;2BAGD;AAAA,UADKE,KACL,uEADa,CACb;;AACC,UAAIhC,KAAK,KAAKA,EAAd;AACAA,SAAGiC,aAAH,CAAiBjC,GAAGkC,QAAH,GAAcF,KAA/B;AACGhC,SAAGiB,WAAH,CAAejB,GAAGkB,UAAlB,EAA8B,KAAKH,QAAnC;AACH;;;;;;kBAzDmBpB,W","file":"DataTexture.js","sourcesContent":["import ext from '../GLExtensions';\r\n\r\nexport default class DataTexture\r\n{\r\n\tconstructor(data, width = 256, height = 256, format)\r\n\t{\r\n\t\tthis.gl = POLY.gl;\r\n\t\tlet gl = this.gl;\r\n\r\n\t\tformat = format || gl.RGBA;\r\n\r\n\t\tvar floatTextures = ext.getExtension('OES_texture_float');\r\n\r\n        if (!ext.getExtension(\"OES_texture_float\")){\r\n          throw new Error( \"float textures not supported\" );\r\n        }\r\n\r\n        var halfFloat = ext.getExtension(\"OES_texture_half_float\");\r\n        let type = gl.UNSIGNED_BYTE;\r\n        const extHalfFloat = ext.getExtension('OES_texture_half_float');\r\n        ext.getExtension(\"OES_texture_float_linear\");\r\n\r\n        if (ext.checkExtension('OES_texture_float'))\r\n        {\r\n            type = gl.FLOAT;\r\n        }\r\n        else if(extHalfFloat) {\r\n            type = extHalfFloat.HALF_FLOAT_OES;\r\n        }\r\n\r\n\t\tconsole.log(type, gl.FLOAT);\r\n\r\n\r\n\t\tthis._texture = gl.createTexture();\r\n\t\tgl.bindTexture(gl.TEXTURE_2D, this._texture);\r\n\t\tconst alignment = 1;\r\n\t\tgl.pixelStorei(gl.UNPACK_ALIGNMENT, alignment);\r\n\r\n\t\tgl.texImage2D(gl.TEXTURE_2D, 0, format, width, height, 0, format, type, data);\r\n\r\n\r\n\t\tif(POLY.utils.isPowerOfTwo(width) && POLY.utils.isPowerOfTwo(height))\r\n  \t\t{\r\n  \t\t}\r\n\r\n\t\tgl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\r\n\t\tgl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\r\n\t\tgl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\r\n\t\tgl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\r\n \t\t// gl.texParameteri ( gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.REPEAT ) ;\r\n\t\t // gl.texParameteri ( gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.REPEAT ) ;\r\n\r\n\t}\r\n\r\n\tbind(index = 0)\r\n\t{\r\n\t\tlet gl = this.gl;\r\n\t\tgl.activeTexture(gl.TEXTURE0 + index);\r\n    \tgl.bindTexture(gl.TEXTURE_2D, this._texture);\r\n\t}\r\n}\r\n"]}