{"version":3,"sources":["../../../src/poly/utils/FacesMultiplicator.js"],"names":["FacesMultiplicator","indexUniq","middlePointIndexCache","vertices","isNormalised","n","indices","length","faces","slice","i","k","Math","abs","faces2","tri","a","getMiddlePoint","b","c","push","position","sqrt","p1","p2","firstPointIsSmaller","smallerIndex","greaterIndex","key","point1","point2","middle","addVertex"],"mappings":"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","file":"FacesMultiplicator.js","sourcesContent":["\nclass FacesMultiplicator {\n  constructor(){\n    this.indexUniq = 0;\n    this.middlePointIndexCache = {};\n    this.vertices = [];\n    this.isNormalised = true;\n  }\n\n\n  multiplyTriangles(n, indices, vertices){\n    this.indexUniq = vertices.length;\n    this.vertices = vertices;\n    let faces = indices.slice();\n\n    this.isNormalised = true;\n    for (var i = 0; i < this.vertices.length; i++) {\n      if(!this.isNormalised) break;\n\n      for (var k = 0; k < this.vertices[i].length; k++) {\n        if(Math.abs(this.vertices[i][k]) > 1){\n          this.isNormalised = false;\n        }\n      }\n    }\n    for (var i = 0; i < n; i++) {\n      let faces2 = [];\n      for (var k = 0; k < faces.length; k++) {\n        let tri = faces[k];\n\n        let a = this.getMiddlePoint(tri[0], tri[1]);\n        let b = this.getMiddlePoint(tri[1], tri[2]);\n        let c = this.getMiddlePoint(tri[2], tri[0]);\n\n        faces2.push([tri[0], a, c]);\n        faces2.push([tri[1], b, a]);\n        faces2.push([tri[2], b, c]);\n        faces2.push([a, b, c]);\n      }\n\n      faces = faces2.slice();\n    }\n\n    return faces;\n  }\n\n  addVertex(position) {\n    let length = this.isNormalised ? Math.sqrt(position[0] * position[0] + position[1] * position[1] + position[2] * position[2]) : 1;\n    this.vertices.push([position[0]/length, position[1]/length, position[2]/length]);\n\n    return this.indexUniq++;\n  }\n\n  getMiddlePoint(p1, p2) {\n    let firstPointIsSmaller = p1 < p2;\n    let smallerIndex = firstPointIsSmaller ? p1 : p2;\n    let greaterIndex = firstPointIsSmaller ? p2 : p1;\n    let key = (smallerIndex << 32) + greaterIndex;\n\n    let point1 = this.vertices[p1];\n    let point2 = this.vertices[p2];\n    let middle = [\n      (point1[0] + point2[0]) / 2.0,\n      (point1[1] + point2[1]) / 2.0,\n      (point1[2] + point2[2]) / 2.0];\n\n    let i = this.addVertex(middle);\n    this.middlePointIndexCache[key] = i;\n\n    return i;\n  }\n}\n\nexport default new FacesMultiplicator();"]}