{"version":3,"sources":["../../../src/poly/camera/Camera.js"],"names":["Camera","aspectRatio","create","matrix","viewMatrix","projectionMatrix","mRX","mRY","mRZ","mT","position","target","up","lookAt","angle","fromYRotation","identity","fromXRotation","x","y","z","translate","perspective","fov","near","far","aspect","left","right","bottom","top","dst","Float32Array"],"mappings":"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","file":"Camera.js","sourcesContent":["import { mat4, vec3 } from 'gl-matrix';\r\n\r\nclass Camera\r\n{\r\n    constructor()\r\n    {\r\n        this.aspectRatio = mat4.create();\r\n\r\n        this.matrix = mat4.create(); // changes on the camera\r\n        this.viewMatrix = mat4.create(); // move the world in front of the camera (inverse)\r\n        this.projectionMatrix = mat4.create();\r\n\r\n\r\n        this.mRX = mat4.create();\r\n        this.mRY = mat4.create();\r\n        this.mRZ = mat4.create();\r\n        this.mT = mat4.create();\r\n\r\n        this.position = vec3.create();\r\n    }\r\n\r\n    lookAt(target, up = [0, 1, 0])\r\n    {\r\n        mat4.lookAt(this.matrix, this.position, target, up);\r\n    }\r\n\r\n    rotateY(angle)\r\n    {\r\n        mat4.fromYRotation(this.mRY, angle);\r\n\r\n    }\r\n    rotateX(angle)\r\n    {\r\n        mat4.identity(this.mRX);\r\n        mat4.fromXRotation(this.mRX, angle);\r\n\r\n    }\r\n\r\n    rotateZ(angle)\r\n    {\r\n        mat4.identity(this.mRZ);\r\n        mat4.fromXRotation(this.mRZ, angle);\r\n\r\n    }\r\n\r\n    setRotation(x, y, z)\r\n    {\r\n    }\r\n\r\n    setPosition(x, y, z)\r\n    {\r\n        this.position = [x, y, z]\r\n        mat4.identity(this.mT, this.mT);\r\n        mat4.translate(this.mT, this.mT, [x, y, z]);\r\n    }\r\n\r\n    setAspectRatio(aspectRatio)\r\n    {\r\n        this.aspectRatio = aspectRatio;\r\n        this.perspective(this.fov, aspectRatio, this.near, this.far);\r\n    }\r\n\r\n    perspective(fov, aspect, near, far)\r\n    {\r\n        mat4.perspective(this.projectionMatrix, fov, aspect, near, far);\r\n\r\n        this.fov = fov;\r\n        this.near = near;\r\n        this.far = far;\r\n        this.aspect = aspect;\r\n    }\r\n\r\n    orthographic(left, right, bottom, top, near, far, dst)\r\n    {\r\n        dst = dst || new Float32Array(16);\r\n\r\n        dst[ 0] = 2 / (right - left);\r\n        dst[ 1] = 0;\r\n        dst[ 2] = 0;\r\n        dst[ 3] = 0;\r\n        dst[ 4] = 0;\r\n        dst[ 5] = 2 / (top - bottom);\r\n        dst[ 6] = 0;\r\n        dst[ 7] = 0;\r\n        dst[ 8] = 0;\r\n        dst[ 9] = 0;\r\n        dst[10] = 2 / (near - far);\r\n        dst[11] = 0;\r\n        dst[12] = (left + right) / (left - right);\r\n        dst[13] = (bottom + top) / (bottom - top);\r\n        dst[14] = (near + far) / (near - far);\r\n        dst[15] = 1;\r\n\r\n        return dst;\r\n    }\r\n}\r\n\r\nexport default Camera;\r\n"]}