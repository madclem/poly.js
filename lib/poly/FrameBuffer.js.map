{"version":3,"sources":["../../src/poly/FrameBuffer.js"],"names":["FrameBuffer","width","height","texture","gl","POLY","floatTextures","getExtension","Error","halfFloat","type","UNSIGNED_BYTE","extHalfFloat","checkExtension","FLOAT","HALF_FLOAT_OES","textures","framebuffer","createFramebuffer","bindFramebuffer","FRAMEBUFFER","createTexture","gltexture","Texture","push","bindTexture","TEXTURE_2D","texParameteri","TEXTURE_WRAP_S","CLAMP_TO_EDGE","TEXTURE_WRAP_T","TEXTURE_MAG_FILTER","NEAREST","TEXTURE_MIN_FILTER","generateMipmap","texImage2D","RGBA","renderBufferDepth","createRenderbuffer","bindRenderbuffer","RENDERBUFFER","renderbufferStorage","DEPTH_COMPONENT16","framebufferTexture2D","COLOR_ATTACHMENT0","framebufferRenderbuffer","DEPTH_ATTACHMENT","clean","viewport","clear","COLOR_BUFFER_BIT","DEPTH_BUFFER_BIT","_texture","canvas","bind","unbind"],"mappings":"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","file":"FrameBuffer.js","sourcesContent":["import ext from './GLExtensions';\n\nexport default class FrameBuffer\n{\n    constructor(width = 512, height = 512, texture)\n    {\n\n        this.gl = POLY.gl;\n        let gl = this.gl;\n\n        this.width = width;\n        this.height = height;\n\n        /*\n         CREATE FRAME BUFFER AND SET UP ALL OF ITS MEMORY\n        */\n\n        var floatTextures = ext.getExtension('OES_texture_float');\n\n        if (!ext.getExtension(\"OES_texture_float\")){\n          throw new Error( \"float textures not supported\" );\n        }\n\n        var halfFloat = ext.getExtension(\"OES_texture_half_float\");\n        let type = gl.UNSIGNED_BYTE;\n        const extHalfFloat = ext.getExtension('OES_texture_half_float');\n        ext.getExtension(\"OES_texture_float_linear\");\n\n        if (ext.checkExtension('OES_texture_float'))\n        {\n            type = gl.FLOAT;\n        }\n        else if(extHalfFloat) {\n            type = extHalfFloat.HALF_FLOAT_OES;\n        }\n\n            // if (mcgl.GL.isMobile && type === gl.FLOAT && extHalfFloat) {\n            //     type = extHalfFloat.HALF_FLOAT_OES;\n            // }\n\n        this.textures = [];\n        // create frame buffer and bind it\n        this.framebuffer = gl.createFramebuffer();\n        gl.bindFramebuffer(gl.FRAMEBUFFER, this.framebuffer);\n\n        // create an empty texture which can store the colour values\n\n        this.texture = gl.createTexture();\n        this.gltexture = new POLY.Texture(this.texture, true);\n        this.textures.push(this.gltexture);\n\n        gl.bindTexture(gl.TEXTURE_2D, this.texture);\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\n        gl.generateMipmap(gl.TEXTURE_2D);\n        gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, this.width, this.height, 0, gl.RGBA, type, null);\n\n        // create a renderbuffer (buffer associated to a frame buffer object), this one for the depth!\n        var renderBufferDepth = gl.createRenderbuffer();\n        gl.bindRenderbuffer(gl.RENDERBUFFER, renderBufferDepth);\n        gl.renderbufferStorage(gl.RENDERBUFFER, gl.DEPTH_COMPONENT16, this.width, this.height);\n\n        // attach everything to the current frame buffer\n        gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, this.texture, 0);\n        gl.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.DEPTH_ATTACHMENT, gl.RENDERBUFFER, renderBufferDepth);\n\n\n        this.clean();\n    }\n\n    bind()\n    {\n        let gl = this.gl;\n        gl.viewport(0, 0, this.width, this.height);\n        gl.bindFramebuffer(gl.FRAMEBUFFER, this.framebuffer);\n        gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\n    }\n\n    unbind()\n    {\n        let gl = this.gl;\n\n        gl.bindTexture(gl.TEXTURE_2D, this.gltexture._texture);\n        gl.generateMipmap(gl.TEXTURE_2D);\n        gl.bindTexture(gl.TEXTURE_2D, null);\n\n        gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n        gl.viewport(0, 0, gl.canvas.width, gl.canvas.height);\n    }\n\n    clean()\n    {\n        let gl = this.gl;\n        gl.bindTexture(gl.TEXTURE_2D, null);\n        gl.bindRenderbuffer(gl.RENDERBUFFER, null);\n        gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n    }\n\n    clear()\n    {\n        this.bind();\n\t    this.gl.clear(0,0,0,0);\n\t\tthis.unbind();\n    }\n}\n"]}