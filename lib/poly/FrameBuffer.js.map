{"version":3,"sources":["../../src/poly/FrameBuffer.js"],"names":["FrameBuffer","width","height","multiTargets","gl","POLY","_multiTargets","getExtension","extHalfFloat","type","UNSIGNED_BYTE","checkExtension","FLOAT","HALF_FLOAT_OES","depthTexture","textures","_initTextures","framebuffer","createFramebuffer","bindFramebuffer","FRAMEBUFFER","webgl2","buffers","i","length","framebufferTexture2D","DRAW_FRAMEBUFFER","COLOR_ATTACHMENT0","TEXTURE_2D","_texture","push","drawBuffers","DEPTH_ATTACHMENT","extDrawBuffer","checkFramebufferStatus","FRAMEBUFFER_COMPLETE","console","log","drawBuffersWEBGL","COLOR_ATTACHMENT0_WEBGL","COLOR_ATTACHMENT1_WEBGL","COLOR_ATTACHMENT2_WEBGL","COLOR_ATTACHMENT3_WEBGL","renderBufferDepth","createRenderbuffer","bindRenderbuffer","RENDERBUFFER","renderbufferStorage","DEPTH_COMPONENT16","framebufferRenderbuffer","clean","numTextures","texture","_createTexture","RGBA","gltexture","DEPTH_COMPONENT24","DEPTH_COMPONENT","UNSIGNED_INT","internalFormat","format","data","createTexture","glt","Texture","bindTexture","texParameteri","TEXTURE_WRAP_S","CLAMP_TO_EDGE","TEXTURE_WRAP_T","TEXTURE_MAG_FILTER","NEAREST","TEXTURE_MIN_FILTER","texImage2D","index","viewport","clear","COLOR_BUFFER_BIT","DEPTH_BUFFER_BIT","canvas","bind","unbind"],"mappings":"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","file":"FrameBuffer.js","sourcesContent":["// hugely rewritten based on Wen's FrameBuffer class https://github.com/yiwenl/Alfrid/blob/master/src/alfrid/FrameBuffer.js\n\nimport ext from './GLExtensions';\n\nexport default class FrameBuffer\n{\n    constructor(width = 512, height = 512, multiTargets = false)\n    {\n\n        this.gl = POLY.gl;\n        let gl = this.gl;\n\n        this.width = width;\n        this.height = height;\n        this._multiTargets = multiTargets;\n\n        // choose type for the texture\n        // ext.getExtension('WEBGL_draw_buffers');\n        ext.getExtension(\"OES_texture_float_linear\");\n        let extHalfFloat = ext.getExtension('OES_texture_half_float');\n\n        let type = gl.UNSIGNED_BYTE;\n        if (ext.checkExtension('OES_texture_float'))\n        {\n            type = gl.FLOAT;\n        }\n        else if(extHalfFloat)\n        {\n            type = extHalfFloat.HALF_FLOAT_OES;\n        }\n\n        this.depthTexture = null;\n        this.textures = [];\n\n        this._initTextures(type);\n\n        // create frame buffer and bind it\n        this.framebuffer = gl.createFramebuffer();\n        gl.bindFramebuffer(gl.FRAMEBUFFER, this.framebuffer);\n\n        if(POLY.webgl2)\n        {\n\t\t\tconst buffers = [];\n\t\t\tfor (let i = 0; i < this.textures.length; i++)\n            {\n\t\t\t\tgl.framebufferTexture2D(gl.DRAW_FRAMEBUFFER, gl.COLOR_ATTACHMENT0 + i, gl.TEXTURE_2D, this.textures[i]._texture, 0);\n\t\t\t\tbuffers.push(gl[`COLOR_ATTACHMENT${i}`]);\n\t\t\t}\n\n\t\t\tgl.drawBuffers(buffers);\n\t\t\tgl.framebufferTexture2D(gl.DRAW_FRAMEBUFFER, gl.DEPTH_ATTACHMENT, gl.TEXTURE_2D, this.depthTexture._texture, 0);\n\n\t\t}\n        else\n        {\n            if(this._multiTargets)\n            {\n                const extDrawBuffer = ext.getExtension('WEBGL_draw_buffers');\n    \t\t\tfor (let i = 0; i < this.textures.length; i++)\n                {\n    \t\t\t\tgl.framebufferTexture2D(gl.FRAMEBUFFER, extDrawBuffer[`COLOR_ATTACHMENT${i}_WEBGL`], gl.TEXTURE_2D, this.textures[i]._texture, 0);\n    \t\t\t}\n\n\n\n                // console.log(extDrawBuffer.COLOR_ATTACHMENT0_WEBGL, gl.COLOR_ATTACHMENT0);\n                // gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, this.textures[0]._texture, 0);\n                // gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT1, gl.TEXTURE_2D, this.textures[1]._texture, 0);\n                // gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT2, gl.TEXTURE_2D, this.textures[2]._texture, 0);\n                // gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT3, gl.TEXTURE_2D, this.textures[3]._texture, 0);\n                // gl.framebufferTexture2D(gl.FRAMEBUFFER, extDrawBuffer.COLOR_ATTACHMENT0_WEBGL, gl.TEXTURE_2D, this.textures[0]._texture, 0);\n                // gl.framebufferTexture2D(gl.FRAMEBUFFER, extDrawBuffer.COLOR_ATTACHMENT1_WEBGL, gl.TEXTURE_2D, this.textures[1]._texture, 0);\n                // gl.framebufferTexture2D(gl.FRAMEBUFFER, extDrawBuffer.COLOR_ATTACHMENT2_WEBGL, gl.TEXTURE_2D, this.textures[2]._texture, 0);\n                // gl.framebufferTexture2D(gl.FRAMEBUFFER, extDrawBuffer.COLOR_ATTACHMENT3_WEBGL, gl.TEXTURE_2D, this.textures[3]._texture, 0);\n\n\n                if (gl.checkFramebufferStatus(gl.FRAMEBUFFER) !== gl.FRAMEBUFFER_COMPLETE) {\n                    console.log('error');\n                }\n\n\t\t\t\textDrawBuffer.drawBuffersWEBGL([\n\t\t\t\t\textDrawBuffer.COLOR_ATTACHMENT0_WEBGL, // gl_FragData[0]\n\t\t\t\t\textDrawBuffer.COLOR_ATTACHMENT1_WEBGL, // gl_FragData[1]\n\t\t\t\t\textDrawBuffer.COLOR_ATTACHMENT2_WEBGL, // gl_FragData[2]\n\t\t\t\t\textDrawBuffer.COLOR_ATTACHMENT3_WEBGL  // gl_FragData[3]\n\t\t\t\t]);\n\n                if(this.depthTexture)\n                {\n                    // gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.DEPTH_ATTACHMENT, gl.TEXTURE_2D, this.glDepthTexture.texture, 0);\n                }\n\t\t\t}\n            else\n            {\n                // create a renderbuffer (buffer associated to a frame buffer object), this one for the depth!\n                var renderBufferDepth = gl.createRenderbuffer();\n                gl.bindRenderbuffer(gl.RENDERBUFFER, renderBufferDepth);\n                gl.renderbufferStorage(gl.RENDERBUFFER, gl.DEPTH_COMPONENT16, this.width, this.height);\n\n                // attach everything to the current frame buffer\n                gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, this.textures[0]._texture, 0);\n                gl.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.DEPTH_ATTACHMENT, gl.RENDERBUFFER, renderBufferDepth);\n            }\n\n\t\t}\n\n        this.clean();\n    }\n\n    _initTextures(type)\n    {\n        let gl = this.gl;\n\n        const numTextures = this._multiTargets ? 4 : 1;\n\n\t\tfor (let i = 0; i < numTextures; i++)\n        {\n\t\t\tconst texture = this._createTexture(gl.RGBA, gl.RGBA, type);\n\t\t\tthis.textures.push(texture);\n\t\t}\n\n        this.gltexture = this.textures[0]; // only to avoid previous versions to break\n\n\t\tif(POLY.webgl2)\n        {\n\t\t\tthis.depthTexture = this._createTexture(gl.DEPTH_COMPONENT24, gl.DEPTH_COMPONENT, gl.UNSIGNED_INT);\n\t\t}\n        // else\n        // {\n\t\t\t// this.depthTexture = this._createTexture(gl.DEPTH_COMPONENT, gl.UNSIGNED_SHORT);\n\t\t// }\n    }\n\n    _createTexture(internalFormat, format, type, data)\n    {\n        let gl = this.gl;\n\n        internalFormat = internalFormat || gl.RGBA;\n        format = format || gl.RGBA;\n        type = type || gl.UNSIGNED_BYTE;\n        data = data || null;\n\n\n\n\n\t\tconst texture = gl.createTexture();\n\t\tconst glt = new POLY.Texture(texture, true);\n\t\tgl.bindTexture(gl.TEXTURE_2D, texture);\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.CLAMP_TO_EDGE);\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.CLAMP_TO_EDGE);\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\n        gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\n\t\t// gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR);\n\t\t// gl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR_MIPMAP_LINEAR);\n        // BEFORE gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, this.width, this.height, 0, gl.RGBA, type, null);\n\t\t// gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, 2, 2, 0, gl.RGBA, gl.UNSIGNED_BYTE, null);\n        gl.texImage2D(gl.TEXTURE_2D, 0, internalFormat, this.width, this.height, 0, format, type, data);\n\t\tgl.bindTexture(gl.TEXTURE_2D, null);\n\n\t\treturn glt;\n\t}\n\n    getTexture(index)\n    {\n        return this.textures[index];\n    }\n\n    bind()\n    {\n        let gl = this.gl;\n        gl.viewport(0, 0, this.width, this.height);\n        gl.bindFramebuffer(gl.FRAMEBUFFER, this.framebuffer);\n        gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\n    }\n\n    unbind()\n    {\n        let gl = this.gl;\n\n        // gl.bindTexture(gl.TEXTURE_2D, this.gltexture._texture);\n        // gl.generateMipmap(gl.TEXTURE_2D);\n        // gl.bindTexture(gl.TEXTURE_2D, null);\n\n        gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n        gl.viewport(0, 0, gl.canvas.width, gl.canvas.height);\n    }\n\n    clean()\n    {\n        let gl = this.gl;\n        gl.bindTexture(gl.TEXTURE_2D, null);\n        gl.bindRenderbuffer(gl.RENDERBUFFER, null);\n        gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n    }\n\n    clear()\n    {\n        this.bind();\n\t    this.gl.clear(0,0,0,0);\n\t\tthis.unbind();\n    }\n}\n"]}